plugins {
	id 'maven-publish'
	alias(libs.plugins.quilt.loom)
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id "com.modrinth.minotaur" version "2.+"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "io.github.p03w.machete" version "1.1.4"
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.lukebemish.dev/releases" }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api
	// Exclude quilt from defaultresources
	modImplementation (libs.defaultresources) {
		transitive = false
	}
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}


githubRelease {
	token =  System.getenv("GH_TOKEN")
	authorization = "Token ${System.getenv("GH_TOKEN")}"
	owner = "UltrusBot"
	repo = "Lucky-Ducks"
	targetCommitish = "1.19"
	body = new File("$rootDir/CHANGELOG.md").getText('UTF-8')
	releaseAssets = remapJar
	dryRun = true
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "luckyducks"
	versionType = "release"
	uploadFile = remapJar
	changelog = new File("$rootDir/CHANGELOG.md").getText('UTF-8')
	versionName = "Lucky Ducks v${project.version}"
	gameVersions = ["1.19.2"]
	loaders = ["quilt"]
	dependencies {
		embedded.project "jsonem"
	}
	syncBodyFrom = rootProject.file("README.md").text
}

curseforge {
	apiKey = System.getenv("CF_API_KEY")
	project {
		id = "663119"
		changelogType = "markdown"
		changelog = new File("$rootDir/CHANGELOG.md").getText('UTF-8')
		releaseType = "release"
		addGameVersion "1.19.2"
		mainArtifact(remapJar) {
			displayName = "Lucky Ducks v${project.version}"
		}
	}
	options {
		debug = true
	}
}
// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
